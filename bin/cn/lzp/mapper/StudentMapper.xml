<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--映射文件  -->

<!-- 
  namespace命名空间，作用就是对sql进行分类化管理，隔离sql
      注意：使用mapper代理方法开发，namespace有重要的作用
 -->
<mapper namespace="cn.lzp.mapper.StudentMapper">

     <sql id="query_student_where">
           <if test="studentCustom!=null">
             <if test="studentCustom.sclass!=null and studentCustom.sclass!=''">
               and student.sclass=#{studentCustom.sclass}
             </if>
             <if test="studentCustom.sname!=null and studentCustom.sname!=''">
              and  student.sname LIKE '%${studentCustom.sname}%' 
            </if>
          </if>
          <if test="sids!=null">
         <!-- 
                              使用foreach遍历传入sids
           collection:指定输入对象中的集合属性
            SELECT * FROM student WHERE sid IN(1,6,7)
          -->
          <foreach collection="sids" item="student_id" open="and sid in(" close=")" separator=",">
              #{student_id}
          </foreach>
       </if> 
     </sql>
     
       
      <!--定义resultMap 
    type:resultMap最后映射的java对象类型，可以使用别名
    id：对resultMap的唯一标识
     -->
    <resultMap type="Student" id="StudentResultMap">
      <!-- id对主键,result对普通属性
       column指列名 property指po类型中的属性名
       -->
       <id column="id_" property="sid"/>
       <result column="name_" property="sname"/>
    </resultMap>
    
     <!-- 用户信息综合查询 -->
     <select id="findStudentList" parameterType="cn.lzp.po.StudentQueryVo" resultType="cn.lzp.po.StudentCustom">
        SELECT * FROM student 
        <!-- where可以自动去掉条件中的第一个and -->
        <where>
           <include refid="query_student_where"></include>
        </where>
     </select>
     
     <!-- 用户信息综合查询总数 -->
     <select id="findStudentCount" parameterType="cn.lzp.po.StudentQueryVo" resultType="int" >
         SELECT count(*) FROM student  
          <where><!-- where自动删除第一个and -->
          <if test="studentCustom!=null">
             <if test="studentCustom.sclass!=null and studentCustom.sclass!=''">
               and student.sclass=#{studentCustom.sclass}
             </if>
             <if test="studentCustom.sname!=null and studentCustom.sname!=''">
              and  student.sname LIKE '%${studentCustom.sname}%' 
            </if>
          </if>
        </where>
     </select>
     
     <!-- 在映射文件中设置sql语句 -->
     <!-- 需求：通过id查询学生表的记录 -->
     <!-- 通过select执行数据库查询
          id：标识映射文件中的Sql
                              将sql语句封装到mappedStatement对象中，所以id称为statement的is
          paremeterType:指定输入参数的类型 
          #{}表示一个占位符
          #{id}：其中的id表示接收输入的参数，参数的名称就是id,#{}中的参数名可以任意，可以是value或其他名称
          resultType：指定sql输出结果的所以映射的java对象类型，select指定resultType表示将单条记录映射成java对象
      -->
     <select id="findStudentBySid" parameterType="int" resultType="student">
          SELECT * FROM student WHERE sid=#{value}
     </select>
     
     <!-- 通过id查询用户信息，使用resultMap输出
      resultMap指定resultMap中的id，如果resultMap在其他的mapper文件，前边需要加namespace
      -->
     <select id="findStudentBySidResultMap" parameterType="int" resultMap="StudentResultMap">
          SELECT sid id_,sname name_ FROM student WHERE sid=#{value};
     </select>
     
     <!-- 需求：通过姓名查询学生表的记录 -->
     <select id="findStudentBySname" parameterType="java.lang.String" resultType="cn.lzp.po.Student">
        SELECT * FROM student WHERE sname LIKE '%${value}%' 
     </select>
     
     <!-- 添加学生 -->
     <insert id="insertStudent" parameterType="cn.lzp.po.Student">
        <!--自增主键的返回  
                           将插入数据的自增主键值返回 到Student中
          SELECT LAST_INSERT_ID()：得到刚才insert进去的主键值，适用于自增主键
          keyProperty：将查询到的主键值设置到parameterType中的任意指定属性
          order：SELECT LAST_INSERT_ID()这条语句相较于insert语句的执行顺序
        -->
        <!--  
        <selectKey keyProperty="sid" order="AFTER"  resultType="java.lang.Integer">
           SELECT LAST_INSERT_ID()
        </selectKey>
        -->
     
        INSERT INTO student(sname,snumber,sclass,scourse,sscore) VALUES(#{sname},#{snumber},#{sclass},#{scourse},#{sscore})
     </insert>
     
     <!-- 删除学生
                      根据id
      -->
     <delete id="deleteStudent" parameterType="java.lang.Integer">
       DELETE FROM student WHERE sid=#{value}
     </delete>
     
     <!-- 更新信息 -->
     <update id="updateStudent" parameterType="cn.lzp.po.Student">
       UPDATE student SET sname=#{sname},snumber=#{snumber},sclass=#{sclass},scourse=#{scourse},sscore=#{sscore} where sid=#{sid}
     </update>
</mapper>